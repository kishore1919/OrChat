name: Build and Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.2.9, v1.3.0, etc.
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write
  packages: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov
    
    - name: Test installation
      run: |
        python -c "import main; print('main.py imported successfully')"
        python main.py --help || echo "Direct execution test"
        orchat --help || echo "CLI help command executed"

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from tag or use default
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          # For manual triggers, use the version from pyproject.toml
          VERSION=$(grep 'version = ' pyproject.toml | sed 's/version = "\([^"]*\)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_NAME=v$VERSION" >> $GITHUB_ENV
        fi
        echo "Detected VERSION: $VERSION"
        echo "Detected TAG_NAME: $TAG_NAME"
    
    - name: Update version in files
      run: |
        echo "Updating version to: $VERSION"
        # Update setup.py version
        sed -i "s/version=\"[^\"]*\"/version=\"$VERSION\"/" setup.py
        # Update pyproject.toml version
        sed -i "s/version = \"[^\"]*\"/version = \"$VERSION\"/" pyproject.toml
        # Verify the changes
        echo "setup.py version line:"
        grep 'version=' setup.py
        echo "pyproject.toml version line:"
        grep 'version =' pyproject.toml
    
    - name: Build package
      run: |
        python -m build
        
    - name: Check built package
      run: |
        python -m twine check dist/*
        ls -la dist/
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: "OrChat ${{ env.TAG_NAME }}"
        tag_name: "${{ env.TAG_NAME }}"
        files: dist/*
        generate_release_notes: true
        draft: true
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}